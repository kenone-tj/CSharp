インターフェースとは
　・抽象クラスの概念をさらに推し進めたもの
　・抽象クラス同様インスタンスを生成できない
　・原則的に記述するのは抽象メソッドのみ
　・使用方法などは抽象クラスとは根本的に異なる
　・既存のクラスに追加していく
　・1つのクラスに複数の側面がある場合によく用いられる

インターフェースの利用方法
　interface (インターフェース名){
  ...
  }

  class (クラス名) : (インターフェース名),(インターフェース名)...{
  ...
  }
　
　・継承と違いインターフェースは複数定義することができる
　・その場合、インターフェース名の間を","で区切る

インターフェースの必要性１
　・大規模なシステム開発(スマートフォン開発など)
　・大勢のプログラマーが1つのクラスを操作するケース
　　・電子メールの機能…IEmailのメンバを使えれば十分
　　・電話の機能…IPhoneのメンバが使えれば十分
　・無関係の人が無関係の部分を操作する危険性を減らせる
　　・バグなどのトラブルの軽減
　　・役割分担の明確化

インターフェースの必要性２
・クラスのバージョンアップ
・旧来のクラスとの互換性をもたせたまま中身を変更したい
・インターフェースを同一にし、ユーザーにはインターフェースのみを遣わすことにより、バージョンアップを意識させない